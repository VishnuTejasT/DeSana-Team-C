{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"_2.^beQjx|FGt38A,8(E\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"10\" y=\"10\"><next><block type=\"iq_control_forever\" id=\"Lm!#4=.h(h)w,mp.h15P\"><statement name=\"SUBSTACK\"><block type=\"iq_control_if_elseif_else\" id=\")%w.V$:.V~96o:g/kz08\"><mutation branches=\"2\"></mutation><field name=\"BRANCH_BLANK\">node_modules/@rm-vca/blockly/media/../../../../static/img/ui_imgs/elseif_blank.png</field><field name=\"BRANCH_REMOVE\">node_modules/@rm-vca/blockly/media/../../../../static/img/ui_imgs/elseif_blank.png</field><field name=\"BRANCH_ADD\">node_modules/@rm-vca/blockly/media/../../../../static/img/ui_imgs/elseif_add.png</field><value name=\"CONDITION1\"><block type=\"iq_sensing_pressing_controller\" id=\"?104d0*=NE3[[e/tl!X,\"><field name=\"BUTTON\">ButtonL3</field></block></value><statement name=\"SUBSTACK1\"><block type=\"iq_drivetrain_set_drive_velocity\" id=\"pjlA2z@co9svq^T/^]/%\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"r8$NjxG8EPeN8x*D5uw|\"><field name=\"NUM\">70</field></shadow></value><next><block type=\"iq_drivetrain_set_turn_velocity\" id=\"eB+g)M01Kp2.*wr1RMYb\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"VnJpa}p1;F.w=)vm:jsr\"><field name=\"NUM\">40</field></shadow></value></block></next></block></statement><value name=\"CONDITION2\"><block type=\"iq_sensing_pressing_controller\" id=\"3t^0~0opn8B_?JJw:HNl\"><field name=\"BUTTON\">ButtonR3</field></block></value><statement name=\"SUBSTACK2\"><block type=\"iq_drivetrain_set_drive_velocity\" id=\"NM@{J)]ccmYF~8nU$6NT\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"wF@c$oqUx8Ln}g)LO=x%\"><field name=\"NUM\">40</field></shadow></value><next><block type=\"iq_drivetrain_set_turn_velocity\" id=\"T!weVJHgbi^JWsZ@4Xhp\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"~v}eIYE1+^~PB==SoLy7\"><field name=\"NUM\">80</field></shadow></value></block></next></block></statement><statement name=\"SUBSTACK_ELSE\"><block type=\"iq_drivetrain_set_drive_velocity\" id=\"W,B)$@5rP;?9fPaa334f\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"9GU.wle1Q7/H}HP]n]y+\"><field name=\"NUM\">50</field></shadow></value><next><block type=\"iq_drivetrain_set_turn_velocity\" id=\"1m/Ni-g3$@3wqiwO@`id\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"ocP5pWyU|VUTL|pf.tq?\"><field name=\"NUM\">30</field></shadow></value></block></next></block></statement><next><block type=\"iq_motion_set_motor_torque\" id=\"pj[wM=Q[yJx$kMd?ckop\"><field name=\"MOTOR\">Flywheel</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"i_S$X*,sUqyvP93_sc2B\"><field name=\"NUM\">80</field></shadow></value></block></next></block></statement></block></next></block><block type=\"iq_events_when_controller_button\" id=\"Kzo7h-uA*Edf}i%+mxE/\" x=\"10\" y=\"710\"><field name=\"BUTTON\">ButtonLUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_set_motor_velocity\" id=\"3zhE_cim{{GsvS9oFOp:\"><field name=\"MOTOR\">Flywheel</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"enG$./8;?TNS!TX#tI$3\"><field name=\"NUM\">70</field></shadow></value></block></next></block><block type=\"iq_events_when_controller_button\" id=\"5M{w/f^@T?l~S/::eDwa\" x=\"10\" y=\"870\"><field name=\"BUTTON\">ButtonLDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_set_motor_velocity\" id=\"KrNa8[XcmweI56@h+3a(\"><field name=\"MOTOR\">Flywheel</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"QpFH5jJ.DTel@AqMg~yk\"><field name=\"NUM\">70</field></shadow></value></block></next></block></xml>","rconfig":[{"port":[1,6,null],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"}},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Flywheel","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"split"}},{"port":[4],"name":"Flywheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}}],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT1, 1, false);\nmotor RightDriveSmart = motor(PORT6, 1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\ncontroller Controller = controller();\nmotor Flywheel = motor(PORT4, false);\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool ControllerLeftShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA + AxisC\n      // right = AxisA - AxisC\n      int drivetrainLeftSideSpeed = Controller.AxisA.position() + Controller.AxisC.position();\n      int drivetrainRightSideSpeed = Controller.AxisA.position() - Controller.AxisC.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonLUp/ButtonLDown status to control Flywheel\n      if (Controller.ButtonLUp.pressing()) {\n        Flywheel.spin(forward);\n        ControllerLeftShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonLDown.pressing()) {\n        Flywheel.spin(reverse);\n        ControllerLeftShoulderControlMotorsStopped = false;\n      } else if (!ControllerLeftShoulderControlMotorsStopped) {\n        Flywheel.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerLeftShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  while (true) {\n    if (Controller.ButtonL3.pressing()) {\n      Drivetrain.setDriveVelocity(70.0, percent);\n      Drivetrain.setTurnVelocity(40.0, percent);\n    } else if (Controller.ButtonR3.pressing()) {\n      Drivetrain.setDriveVelocity(40.0, percent);\n      Drivetrain.setTurnVelocity(80.0, percent);\n    } else {\n      Drivetrain.setDriveVelocity(50.0, percent);\n      Drivetrain.setTurnVelocity(30.0, percent);\n    }\n    Flywheel.setMaxTorque(80.0, percent);\n  wait(20, msec);\n  }\n  return 0;\n}\n\n// \"when Controller ButtonLUp pressed\" hat block\nvoid onevent_ControllerButtonLUp_pressed_0() {\n  Flywheel.setVelocity(70.0, percent);\n}\n\n// \"when Controller ButtonLDown pressed\" hat block\nvoid onevent_ControllerButtonLDown_pressed_0() {\n  Flywheel.setVelocity(70.0, percent);\n}\n\n\nint main() {\n  // register event handlers\n  Controller.ButtonLUp.pressed(onevent_ControllerButtonLUp_pressed_0);\n  Controller.ButtonLDown.pressed(onevent_ControllerButtonLDown_pressed_0);\n\n  wait(15, msec);\n  whenStarted1();\n}","target":"Physical"}